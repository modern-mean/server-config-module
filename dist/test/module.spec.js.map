{"version":3,"file":"module.spec.js","sourceRoot":"","sources":["../../test/module.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import * as test from 'blue-tape';\nimport * as sinon from 'sinon';\nimport { ConfigModule } from '../src/module';\nimport * as lodash from 'lodash';\n\n\n\ntest('constructor with no args', (assert) => {\n  assert.plan(1);\n  let moduleTest = new ConfigModule();\n  assert.notEqual(moduleTest.get(), undefined, 'get should return undefined');\n});\n\ntest('constructor with args', (assert) => {\n  let sandbox = sinon.sandbox.create();\n  let spy = sandbox.spy(lodash, 'defaultsDeep');\n  let config = { test: { okie: 'dokie' } };\n  let moduleTest = new ConfigModule(config);\n  assert.deepLooseEqual(moduleTest.get(), config, 'should return config');\n  assert.equal(spy.called, true, 'should call lodash.defaultsDeep');\n  sandbox.restore();\n  assert.end();\n});\n\ntest('set method', (assert) => {\n  let config = { test: { okie: 'dokie' } };\n  let config2 = { test: 'sweet' };\n  let moduleTest = new ConfigModule(config);\n  moduleTest.set(config2);\n  assert.equal(moduleTest.get(), config2, 'should override config');\n  assert.end();\n});\n\ntest('merge method', (assert) => {\n  let sandbox = sinon.sandbox.create();\n  let spy = sandbox.spy(lodash, 'merge');\n  let config = { test: { okie: 'dokie' } };\n  let config2 = { test: 'sweet' };\n  let config3 = { test: 'sure' };\n  let moduleTest = new ConfigModule(config);\n  moduleTest.merge(config2, config3);\n  assert.equal(spy.called, true, 'should call lodash merge');\n  assert.deepLooseEqual(spy.args[0][0], moduleTest.get(), 'should call lodash merge with first argument previous config');\n  assert.deepLooseEqual(spy.args[0][1], config2, 'should call lodash merge with second argument config2');\n  assert.deepLooseEqual(spy.args[0][2], config3, 'should call lodash merge with second argument config3');\n  sandbox.restore();\n  assert.end();\n});\n\n\n  /*\n\ndescribe('/src/config.js', () => {\n\n  beforeEach(() => {\n    return sandbox = sinon.sandbox.create();\n  });\n\n  afterEach(() => {\n    return sandbox.restore();\n  });\n\n  describe('constructor', () => {\n\n    it('should return an object', () => {\n      moduleTest = new ConfigModule();\n      return moduleTest.should.be.an('object');\n    });\n\n    it('should initialize as empty object if no config is passed', () => {\n      moduleTest = new ConfigModule();\n      return Object.keys(moduleTest.get()).length.should.be.equal(0);\n    });\n\n    it('should call defaults', () => {\n      let defaultSpy = sandbox.spy(lodash, 'defaultsDeep');\n      let config = { test: 'test' };\n      moduleTest = new ConfigModule(config);\n      return defaultSpy.should.be.called;\n    });\n\n  });\n\n  describe('get', () => {\n\n    it('should return configuration', () => {\n      config = { test: 'test' };\n      moduleTest = new ConfigModule(config);\n      return moduleTest.get().test.should.be.equal('test');\n    });\n\n  });\n\n  describe('set', () => {\n\n    it('should override configuration', () => {\n      let config = { test: 'test' };\n      moduleTest = new ConfigModule(config);\n      let newconfig = { sure: 'thing' };\n      moduleTest.set(newconfig);\n      return moduleTest.get().should.be.equal(newconfig);\n    });\n\n  });\n\n  describe('merge', () => {\n\n    beforeEach(() => {\n      config = { test: 'test', sure: 'thing' };\n      moduleTest = new ConfigModule(config);\n    });\n\n    it('should call lodash merge', () => {\n      let mergeSpy = sandbox.spy(lodash, 'merge');\n      let newconfig = { sure: 'okie' };\n      moduleTest.merge(newconfig);\n      return mergeSpy.should.have.been.calledWith(moduleTest.get(), newconfig);\n    });\n\n  });\n\n  describe('defaults', () => {\n\n    beforeEach(() => {\n      config = { test: 'test', sure: 'thing' };\n      moduleTest = new ConfigModule(config);\n    });\n\n    it('should call lodash defaults', () => {\n      let defaultSpy = sandbox.spy(lodash, 'defaultsDeep');\n      let newconfig = { sure: 'okie' };\n      moduleTest.defaults(newconfig);\n      return defaultSpy.should.have.been.calledWith(config, newconfig);\n    });\n\n  });\n\n});\n\n*/\n"]}